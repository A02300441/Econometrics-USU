#---------------------------------------------------------------------------------------
# 1- integer  (if you don't put "L" then it will be double by default)
x <- 2L
typeof(x)
is.integer(x)
#---------------------------------------------------------------------------------------
# 2- double
y<- 2.5
is.double(y)
#---------------------------------------------------------------------------------------
# 3- character
a <- "hello"
typeof(a)
#---------------------------------------------------------------------------------------
# 4- logical
x1 <- TRUE # T or True
x2 <- F # F or False
## logicals
# > < == != !(not) /(or) &  isTrue(x)
x<- 4!=5
isTRUE(x)
y<- !(4<5)
y
isTRUE(y)
#---------------------------------------------------------------------------------------
# 5 vector: note that vector has 1 type, not a combination
c(1,2,3) # combine function
seq(1,5) # sequence function (like 1:5)
seq(1,10,2)
seq(1,10,length.out = 100) #100 pieces btw 1:10
#---------------------------------------------------------------------------------------
# 5 vector: note that vector has 1 type, not a combination
c(1,2,3) # combine function
seq(1,5) # sequence function (like 1:5)
seq(1,10,2)
seq(1,10,length.out = 100) #100 pieces btw 1:10
x<- c("a",2,3)
seq(1,9, along.with =x ) # make 1:10 into number of x pieces
#replicating
rep(1,3)
rep("pedram",2)
rep(c(1,0),times=5)
rep(c(1,0),each=5)
# brackets[]
x<- c(10,20,30,40,50)
x[2]
x[-3] # negative sign means do not include
x[1:3]
x[c(1,3)]
x[c(-2,-4,-5)]
x[-1:-2]
x[-2:-1]
x[20]
# vector arithmetic
a<- 1:3
b<- c(2,1,5)
a+b
a>b
a/b
a*b
#---------------------------------------------------------------------------------------
## 6 Matrix
mydata<-  1:20
seq(1,17,4)
matrix(20:39)
matrix(20:39, 4,5)
matrix(20:39, 4,5, byrow = T)
a<-matrix(20:39, 4,5, byrow = T)
colnames(a) <- c("A","B","C","D","E")
a
LETTERS
LETTERS[1,5]
LETTERS[1:5]
B<- a[c(2,4), c(2,4)]
B
B<- a[c(2,4), c("B","D")]
B
B<- a[c(2,4), c("B","E")]
B
solve(A)
solve(a)
solve(B)
B %*% solve(B)
df <- mtcars
head(df,10)
df %>% head(5)
library(dplyr)
df %>% head(5)
df %>% select(c(cyl, hp, wt,vs,am,gear,mpg))  %>% head(5)
df %>% select(c(cyl, hp, wt,vs,am,gear,mpg))  %>% sort(cyl) %>% head(5)
df %>% select(c(cyl, hp, wt,vs,am,gear,mpg))  %>% sort("cyl") %>% head(5)
df %>% select(c(cyl, hp, wt,vs,am,gear,mpg))  %>% arrange() %>% head(5)
df %>% select(c(cyl, hp, wt,vs,am,gear,mpg))  %>% arrange(cyl) %>% head(5)
my_dataframe <- data.frame( student_name=c("PJ", "TJ", "MJ"),
gender= c("Male", "Male", "female"),
GPA=c(3.9,4,3.8))
my_dataframe
nrow(my_dataframe)
ncol(my_dataframe)
head(my_dataframe, n=2)
tail(my_dataframe)
str(my_dataframe)  # for job interview str() and runif(), the latter is random uniform :)
summary(my_dataframe)
install.packages("vtable")
library(vtable)
sumtable(mtcars)
summary(mtcars)
vtable(mtcars)
my_dataframe$student_name
my_dataframe["student_name"]
my_dataframe[c("student_name", "gender")]
my_dataframe[,-3]
my_dataframe[-2, ]
## while
counter <- 1
while(counter < 11){
print(counter)
counter<- counter+1
}
## while
counter <- 1
while(counter < 11){
print(counter)
counter<- +1
}
## while
counter <- 1
while(counter < 11){
print(counter)
counter<- counter+1
}
## repeat
v <- c("Hello","loop")
cnt <- 1
repeat {
print(v)
cnt <- cnt+1
if(cnt > 5) {
break
}
}
## for
for(i in seq(1,10,3)){
print(paste("we are in number",i))
}
x <- rnorm(n = 1, mean = 0,sd = 2)
x
if(x>1){
answer<- "greater than 1"
} else if(x>= -1) {
answer <- "btw -1 and 1"
} else{
answer <- "less than -1"
}
answer
str(df1)
str(df)
df %>% select(c(vs,am,gear)) %>% factor()
df %>% select(c(vs,am,gear))
df %>% select(c(vs,am,gear)) %>% apply(factor)
df %>% select(c(vs,am,gear)) %>% apply(factor())
df %>% select(c(vs,am,gear)) %>% lapply(factor)
df<- df %>% select(c(vs,am,gear)) %>% lapply(factor)
str(df)
# Handling missing data
library(naniar)
vis_miss(df)
df<- wage2
head(df)
str(df)
summary(df)
# Handling missing data
library(naniar)
vis_miss(df)
df<- wage2
library(wooldridge)
df<- wage2
head(df)
str(df)
summary(df)
# Handling missing data
library(naniar)
vis_miss(df)
# cleaning the data set
df_clean <-na.omit(df)
vis_miss(df)
# Data tables
df <- select(df_clean, c("wage", "hours", "IQ", "educ", "age", "married", "black"))
head(df)
table(df$married)
table(df$black)
my_table<- table(df$married, df$black)
my_table
colnames(my_table) <- c("non_black", "black")
rownames(my_table)<- c("non_married", "married")
my_table
# proportion tables
prop.table(my_table,margin= 1)
prop.table(my_table,2)
# factorizing some variables (we will use this for making dummy variables later in the course)
df$married <- factor(df$married)
df$black   <- factor(df$black)
str(df)
# some basic plots
df<- wage2
df %>% select(c(vs,am,gear)) %>% lapply(factor)
df <-mtcars
df %>% select(c(vs,am,gear)) %>% lapply(factor)
df %>% select(c(vs,am,gear)) %>% across(.fns = factor)
df %>% select(c(vs,am,gear)) %>% across(factor)
df %>% select(c(vs,am,gear)) %>% across(factor())
df %>% across(c(vs,am,gear), factor())
df %>% across(c(vs,am,gear), factor)
df
df %>% across(c(vs,am,gear), ~factor)
df %>% across(c(vs,am,gear), ~.factor)
df %>% factor(across(vs))
df %>% summarize(across(vs))
df %>% summarize(across(mpg))
df %>% summarize(across(mpg, mean))
df %>% mutate(vs = factor(vs))
str(df)
df<- df %>% mutate(vs = factor(vs))
str(df)
df<- df %>% mutate(c(am,gear) = factor(c(am,gear))
df<- df %>% mutate(c(am,gear) = factor(c(am,gear)))
df %>% select(c(vs,am,gear)) %>% mutate(factor)
df
str(Df)
str(df)
df1 %>% select(c(am, gear)) %>% lapply(factor)
df1 <-df %>% select(c(am, gear)) %>% lapply(factor)
str(df1)
df[,colnames(df1) %in% colnames(df)]
colnames(df1) %in% colnames(df)
colnames(df1)
df1
head(df1)
df1 <-df %>% select(c(am, gear)) %>% apply(MARGIN = 2,factor)
head(df1)
df[,colnames(df1) %in% colnames(df)]
colnames(df1) %in% colnames(df)
colnames(df) %in% colnames(df1)
df[,colnames(df) %in% colnames(df1)]
df[,colnames(df) %in% colnames(df1)] <- df1
head(df1)
head(df)
str(df)
df1 <-df %>% select(c(am, gear)) %>% apply(MARGIN = 2,factor())
df1 <-df %>% select(c(am, gear)) %>% apply(MARGIN = 2,factor)
str(df1)
gc()
gc()
install.packages("learnr")
my_dataframe <- data.frame( student_name=c("PJ", "TJ", "MJ"),
gender= c("Male", "Male", "female"),
GPA=c(3.9,4,3.8))
my_dataframe
library(wooldridge)
wage1
head(wage1, 10)
str(my_dataframe)  # for job interview str() and runif(), the latter is random uniform :)
my_dataframe
summary(my_dataframe)
c(1,2)
my_dataframe[,-3]
my_dataframe[-2, ]
new_df <- data.frame(names=c("PJ", "TJ", "CJ", "MJ"), GPA=c(2,3.8,3.5, 4))
new_df
mutate()
# working with dplyr package (explore the cheatsheet from the help menu)
library(dplyr)
mutate(new_df, height = c(180,170,175, 172))
# mutate()
mutate(new_df, height = c(180,170,175, 172)) # adding a new column
new_df
new_df <- mutate(new_df, height = c(180,170,175,190))
new_df
new_df <- mutate(new_df, is_pass= ifelse(GPA>3.6,"pass", "fail"))
new_df
# filter()
new_df
filter(new_df, is_pass=="fail")
filter(new_df, GPA>3)
filter(new_df, GPA>3 & height>=175)
new_df
# arrange()
arrange(new_df, GPA)
arrange(new_df, desc(height))
arrange()
arrange
lm
new_df
# select()
new_df$height
new_df["height"]
select(new_df, height)
select(new_df, c(is_pass,names))
# So what is the power of select?
names(wage2)
View(wage1)
select(wage2, contains("educ"))
head(select(wage2, starts_with("E"))) # what if I put a negative sign before start_with ?
head(select(wage2, ends_with("c")))
new_df
# combining functions
filter(new_df, GPA>3 & height>=170)
arrange(filter(new_df, GPA>3 & height>=170),desc(height))
select(arrange(filter(new_df, GPA>3 & height>=170),desc(height)), names)
# using pipe operator
new_df %>% filter(GPA>3 & height>=170) %>% arrange(desc(height)) %>% select(names)
df<- wage2
head(df)
str(df)
summary(df)
hist(df$wage)
summary(df)
# Handling missing data
library(naniar)
vis_miss(df)
# cleaning the data set
df_clean <-na.omit(df)
vis_miss(df_clean)
# Data tables
df <- select(df_clean, c("wage", "hours", "IQ", "educ", "age", "married", "black"))
head(df)
table(df$married)
table(df$black)
my_table<- table(df$married, df$black)
my_table
colnames(my_table) <- c("non_black", "black")
rownames(my_table)<- c("non_married", "married")
my_table
# proportion tables
prop.table(my_table,margin= 1)
prop.table(my_table,2)
test <- table(df$married, df$black, df$wage)
test
test <- table(df$married, df$black, df$black)
test
prop.table(test, 3)
str(df)
# factorizing some variables (we will use this for making dummy variables later in the course)
df$married <- factor(df$married)
df$black   <- factor(df$black)
str(df)
# some basic plots
df<- wage2
# histogram
hist(df$wage)
hist(df$wage, xlab = "wage", col = "blue")
# scatter plot
plot(df$educ, df$wage, xlab = "education", ylab = "Wage")
# scatter plot
plot(df$educ, df$wage, xlab = "education", ylab = "Wage")
#---------------------------------------------------------------------------------------
# 9- List: list is a generic collection of objects
my_list <- list()
my_list[[1]] <- "Hello"
my_list[[2]] <- c(1,2,3)
my_list[[3]] <- data.frame(name=c("A", "B"), value=c(4,3.8))
my_list
## exploring the vtable package
install.packages("vtable")
## exploring the vtable package
# install.packages("vtable")
library(vtable)
vtable::sumtable(wage1)
summary(wage1)
v1 <- c(1,5, 9,13,17)
v1
seq(1,17,4)
v1 <- seq(1,17,4)
v1
